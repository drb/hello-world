<!DOCTYPE html>
<html>
<head>
    <link href="https://fonts.googleapis.com/css?family=Roboto|Inconsolata:400,700" rel="stylesheet">
    <style>
    body {
        font-family: Roboto, sans-serif;
        border-top: 6px solid {{colour}};
        padding: 0px;
        margin: 0px;
        transition: background-color 0.5s, color 0.5s;

    }
    body.killed {
        background-color: #a82615;
        border-top: none;
        color:#fff;
    }
    div.container {
        width: 800px;
        margin: 0px auto 0px auto;
    }
    h1 {
        font-size: 60px;
        padding-bottom: 20px;
        border-bottom: 1px solid #e4e4e4;
    }
    h3 {
        margin-bottom: -8px;
    }
    section.paco {
        display: inline-block;
        float:right;
        background-color: #000;
        height: 60px;
        width: 60px;
        -moz-border-radius:30px;
        -webkit-border-radius: 30px;
        position: relative;
    }
    section.paco span {
        position: absolute;
        top:23px;
        color: #fff;
        font-size: 12px;
        left:4px;
    }
    a {
        color: inherit;
    }
    a.btn {
        border: 2px solid #666;
        color: #333;
        background-color:#fff;
        border-radius: 3px;
        padding: 12px;
        text-decoration: none;
    }
    a.btn:hover {
        background-color: #333;
        color:#fff;
        border-color: #000;
    }
    ul {
        margin-top: 30px;
        padding: 0;
    }
    li {
        margin-right: 20px;
        list-style-type: none;
        padding: 0;
        float: left;
    }
    pre {
        font-family: 'Inconsolata', monospace;
        background-color: #F5F5F5;
        padding: 12px;
        border-radius: 16px;
        margin-bottom: 22px;
    }
    body.killed pre {
        background-color: black;
        color: #fff;
    }
    body.killed h1 {
        text-decoration: line-through;
    }
    </style>
    <script>
        // sends a signal to the backend to make the container unstable. this will cause the container to crash but 
        // within a random time frame.
        function unstable() {
            // kill interval should be somewhere between 0 and 60 seconds
            const killInterval = Math.floor(Math.random() * 60000);
                  killTime = Date.now() + killInterval;
            // create a timeout to send the signal to the backend
            setTimeout(() => {
                kill();
            }, killInterval);

            // create an interval to update the button text. this will show how many seconds are left until the container crashes.
            const interval = setInterval(() => {
                const counter = document.getElementById('unstable-counter');
                // time left is the difference between now and now + killInterval
                const timeLeft = Math.floor((killTime - Date.now()) / 1000);
                counter.innerText = `Unstable mode ü•¥ (${timeLeft}s)`;
                if (timeLeft <= 0) {
                    clearInterval(interval);
                }
            }, 1000);

            return false;
        }
        // gives the kill signal to the backend. this will terminate the container.
        function kill() {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/state/kill", true);
            xhr.send();
            // remove the #controls section to prevent further actions
            document.getElementById('controls').remove();
            // add the killed class to the body
            document.body.classList.add('killed');
            //
            return false;
        }
    </script>
    <title>Hello. {{instance}}</title> 
    <meta charset="utf-8">
</head>
<body>
    
<div class="container">
    <section class="paco">
        <span><a href="https://pacosystems.com">PACO!</a></span> 
    </section>
    <h1>Hello.</h1>
    <h3>Instance.</h3>
    <pre>
<strong>INSTANCE:</strong> {{instance}}
<strong>HOSTNAME:</strong> {{hostname}}
<strong>PLATFORM:</strong> {{platform}}
<strong>LOCAL TIME:</strong> {{localTime}}
<strong>UTC:</strong> {{utcTime}}
<strong>UPTIME:</strong> {{uptime}}</pre>
    <h3>Environment.</h3>
    <pre>{{{env}}}</pre>
    <div id="controls">
        <h3>Controls.</h3>
        <p>These controls will put the container into an <em>Unstable</em> mode (can crash unpredictably) or <em>Kill</em> mode (terminates the container). These modes can be used to test your Kubernetes cluster's ability to restore services.</p>
        <ul>
            <li><a class="btn" href="" onclick="return unstable();" id="unstable-counter">Unstable mode ü•¥</a></li>
            <li><a class="btn" href="" onclick="return kill();">Kill instance ‚ò†Ô∏è</a></li>
        </ul>
    </div>
</div>
</body>
</html>
